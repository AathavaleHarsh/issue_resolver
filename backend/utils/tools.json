{


    "grep_search": {
        "schema": "<grep_search>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"type\":\"object\",\"properties\":{\"repo_owner\":{\"type\":\"string\",\"description\":\"The owner of the GitHub repository.\"},\"repo_name\":{\"type\":\"string\",\"description\":\"The name of the GitHub repository.\"},\"search_path\":{\"type\":\"string\",\"description\":\"The directory or file path within the repository to search in (relative to the repository root).\"},\"query\":{\"type\":\"string\",\"description\":\"The search term or pattern to look for.\"},\"match_per_line\":{\"type\":\"boolean\",\"description\":\"If true, return line details; otherwise, return filenames only.\"},\"includes\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"List of file patterns or names to include in the search.\"},\"case_insensitive\":{\"type\":\"boolean\",\"description\":\"If true, performs a case-insensitive search.\"},\"max_results\":{\"type\":\"integer\",\"description\":\"The maximum number of results to return. Defaults to 50.\"}},\"required\":[\"repo_owner\",\"repo_name\",\"search_path\",\"query\",\"match_per_line\",\"includes\",\"case_insensitive\"],\"additionalProperties\":false}\n</grep_search>",
        "description": "Performs a grep-like search within a specified GitHub repository using the GitHub Search API. It searches for a given query within a specific path in the repository and can return either the filenames containing the query or the specific lines where the query is found, depending on the 'match_per_line' parameter. The search can be restricted to certain file types or names using the 'includes' parameter (e.g., '*.py' for Python files or 'README.md' for specific files). The search operates on the default branch of the repository. Note that the GitHub Search API is case-insensitive by default; when 'case_insensitive' is false, the function attempts to filter results post-fetch for exact case matches, which may not be fully reliable. Enabling 'match_per_line' requires fetching the content of each matching file, which can be slow and may quickly exhaust API rate limits, especially in large repositoriesâ€”use this option with caution. The function returns a list of dictionaries: each dictionary contains the 'Filename' (and, if 'match_per_line' is true, 'LineNumber' and 'LineContent'). The number of results is capped at 'max_results' (default 50) to limit API usage. If no matches are found or an error occurs (e.g., rate limit exceeded, repository not found), an empty list is returned."
    },
    
    
    "list_dir": {
      "schema": "<list_dir>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"DirectoryPath\":{\"type\":\"string\",\"description\":\"Path to list contents of, should be absolute path to a directory\"}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"DirectoryPath\"]}\n</list_dir>",
      "description": "List the contents of a directory. Directory path must be an absolute path to a directory that exists. For each child in the directory, output will have: relative path to the directory, whether it is a directory or file, size in bytes if file, and number of children (recursive) if directory."
    },
    
    
    "find_file": {
      "schema": "<find_file>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"repo_owner\":{\"type\":\"string\",\"description\":\"Owner of the GitHub repository\"},\"repo_name\":{\"type\":\"string\",\"description\":\"Name of the GitHub repository\"},\"pattern\":{\"type\":\"string\",\"description\":\"Pattern to match file names against (glob format)\",\"default\":\"*\"},\"search_path\":{\"type\":\"string\",\"description\":\"Directory path within the repository to start search from\",\"default\":\"\"},\"file_type\":{\"type\":\"string\",\"description\":\"Type filter - 'file', 'directory', or 'any'\",\"enum\":[\"file\",\"directory\",\"any\"],\"default\":\"any\"},\"max_depth\":{\"type\":[\"integer\",\"null\"],\"description\":\"Maximum depth to search (null for unlimited)\",\"default\":null},\"github_token\":{\"type\":[\"string\",\"null\"],\"description\":\"GitHub access token for higher rate limits\",\"default\":null}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"repo_owner\",\"repo_name\"]}\n</find_file>",
      "description": "Search for files in a GitHub repository by name pattern. Returns a list of matching files/directories with their paths, types, sizes, and GitHub URLs. Supports glob patterns for file name matching and allows filtering by file type and search depth."
    },
    
    "get_code_dependencies": {
      "schema": "<get_code_dependencies>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"repo_owner\":{\"type\":\"string\",\"description\":\"The owner of the GitHub repository (e.g., 'octocat')\"},\"repo_name\":{\"type\":\"string\",\"description\":\"The name of the GitHub repository (e.g., 'Hello-World')\"},\"file_path\":{\"type\":\"string\",\"description\":\"The path to the Python file within the repository (e.g., 'src/main.py')\"},\"github_token\":{\"type\":[\"string\",\"null\"],\"description\":\"Optional GitHub personal access token for higher rate limits\",\"default\":null}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"repo_owner\",\"repo_name\",\"file_path\"]}\n</get_code_dependencies>",
      "description": "Analyzes a Python file from a GitHub repository to identify its direct import dependencies. Returns a list of top-level module names that are imported in the specified Python file. Works with both public and private repositories (with a GitHub token). Handles standard import statements and from-import statements, and gracefully handles common error cases like rate limits and file not found."
    },
    
    
    
    
    "get_call_hierarchy": {
      "schema": "<get_call_hierarchy>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"repo_owner\":{\"type\":\"string\",\"description\":\"Owner of the GitHub repository\"},\"repo_name\":{\"type\":\"string\",\"description\":\"Name of the GitHub repository\"},\"file_path\":{\"type\":\"string\",\"description\":\"Path to the file containing the target element\"},\"element_name\":{\"type\":\"string\",\"description\":\"Name of the element to analyze (e.g., 'MyClass.my_function')\"},\"direction\":{\"type\":\"string\",\"description\":\"Direction of analysis - 'callers' or 'callees'\",\"enum\":[\"callers\",\"callees\"]},\"github_token\":{\"type\":[\"string\",\"null\"],\"description\":\"GitHub personal access token for higher rate limits\",\"default\":null}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"repo_owner\",\"repo_name\",\"file_path\",\"element_name\",\"direction\"]}\n</get_call_hierarchy>",
      "description": "Analyzes the call hierarchy of a function or method in a GitHub repository. Can show either where a function is called from (callers) or what functions it calls (callees). Returns a list of dictionaries containing information about each call site, including file paths, line numbers, and context. Works with both public and private repositories (with a GitHub token). Handles both standalone functions and class methods."
    },
    
    "view_code_structure": {
      "schema": "<view_code_structure>\n{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"file_path\":{\"type\":\"string\",\"description\":\"Path to the file on GitHub (format: 'owner/repo/path/to/file.py')\"},\"element_name\":{\"type\":[\"string\",\"null\"],\"description\":\"Optional name of a specific element to view (e.g., 'MyClass.my_function')\",\"default\":null}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"file_path\"]}\n</view_code_structure>",
      "description": "Analyzes and returns the structure of a Python code file from a GitHub repository. Can provide either a complete overview of the file's structure (imports, classes, functions, global variables) or detailed information about a specific code element. The file path should be in the format 'owner/repo/path/to/file.py'. For private repositories, set the GITHUB_TOKEN environment variable. Returns a structured dictionary with the code organization."
    }
    
    
    }